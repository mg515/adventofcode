setwd("/media/diskC/Documents and Settings/miha/Documents/adventofcode/1/")
l <- readLines(con <- file("input.txt", encoding = "utf-8"))
### part1
zac <- gregexpr("[(]" ,text=l)
zak <- gregexpr("[)]" ,text=l)
length(unlist(zac)) - length(unlist(zak))
### part2
sez <- unlist(strsplit(l, ""))
stuk <- 0
i <- 1
while (stuk >= 0){
if (sez[i]=="("){
stuk = stuk + 1
} else {
stuk = stuk - 1
}
i = i + 1
}
i = i - 1
setwd("/media/diskC/Documents and Settings/miha/Documents/adventofcode/1/")
l <- readLines(con <- file("input.txt", encoding = "utf-8"))
### part1
zac <- gregexpr("[(]" ,text=l)
zak <- gregexpr("[)]" ,text=l)
length(unlist(zac)) - length(unlist(zak))
### part2
sez <- unlist(strsplit(l, ""))
stuk <- 0
i <- 1
while (stuk >= 0){
if (sez[i]=="("){
stuk = stuk + 1
} else {
stuk = stuk - 1
}
i = i + 1
}
i - 1
setwd("/media/diskC/Documents and Settings/miha/Documents/adventofcode/2/")
data <- read.table("input.txt", sep="x")
calc_area <- function(dims){
dims <- sort(dims)
area <- 2*dims[1]*dims[2] + 2*dims[1]*dims[3] + 2*dims[2]*dims[3]
area <- area + dims[1]*dims[2]
return (area)
}
calc_ribbon <- function(dims){
dims <- sort(dims)
ribwrap <- 2*dims[1] + 2*dims[2] + prod(dims)
return (ribwrap)
}
area <- sum(apply(data, 1, function(x) calc_area(x)))
ribbon <- sum(apply(data, 1, function(x) calc_ribbon(x)))
area
ribbon
setwd("/media/diskC/Documents and Settings/miha/Documents/adventofcode/3/")
l <- readLines(con <- file("input.txt", encoding = "utf-8"))
str <- unlist(strsplit(l, ""))
pos <- c(0,0)
positions <- list(pos)
for (i in str[(1:length(str)) %% 2 == 1]){
switch(i,
"^" = {
pos[1] <- pos[1] + 1
},
"v" = {
pos[1] <- pos[1] - 1
},
">" = {
pos[2] <- pos[2] + 1
},
"<" = {
pos[2] <- pos[2] - 1
})
positions <- c(positions, list(pos))
}
length(unique(positions))
pos <- c(0,0)
positions2 <- list(pos)
for (i in str[(1:length(str)) %% 2 == 0]){
switch(i,
"^" = {
pos[1] <- pos[1] + 1
},
"v" = {
pos[1] <- pos[1] - 1
},
">" = {
pos[2] <- pos[2] + 1
},
"<" = {
pos[2] <- pos[2] - 1
})
positions2 <- c(positions2, list(pos))
}
length(unique(c(positions, positions2)))
# http://adventofcode.com/day/9
setwd("/media/diskC/Documents and Settings/miha/Documents/adventofcode/9/")
l <- readLines(con <- file("input.txt", encoding = "utf-8"))
close(con)
mesta1 <- unlist(unique(lapply(l, function(x) mesto1f(x))))
mesta2 <- unlist(unique(lapply(l, function(x) mesto2f(x))))
mesta <- unique(c(mesta1, mesta2))
matrika <- matrix(0, nrow=length(mesta), ncol=length(mesta))
rownames(matrika) <- mesta
colnames(matrika) <- mesta
for (i in 1:length(l)){
mesto1 <- mesto1f(l[i])
mesto2 <- mesto2f(l[i])
dist <- distf(l[i])
matrika[mesto1, mesto2] <- as.numeric(dist)
}
matrika <- matrika + t(matrika)
min <- 0
perms <- permutations(length(mesta), length(mesta))
for (j in 1:factorial(length(mesta))){
perm <- perms[j,]
dist <- 0
for (i in 1:(length(perm)-1)){
dist <- dist + matrika[perm[i], perm[i+1]]
}
if (dist>min){
min <- dist
}
}
mesto1f <- function(string){
a <- regexpr("\\w*\\S", string)
mesto1 <- regmatches(string, a)
return(mesto1)
}
mesto2f <- function(string){
a <- regexpr("(?<=to\\s)(\\w+)", string, perl=T)
mesto2 <- regmatches(string, a)
return(mesto2)
}
distf <- function(string){
a <- regexpr("[0-9]+", string)
dist <- regmatches(string, a)
return(dist)
}
dist
matrika
mesta1
# http://adventofcode.com/day/9
setwd("/media/diskC/Documents and Settings/miha/Documents/adventofcode/9/")
l <- readLines(con <- file("input.txt", encoding = "utf-8"))
close(con)
mesta1 <- unlist(unique(lapply(l, function(x) mesto1f(x))))
mesta2 <- unlist(unique(lapply(l, function(x) mesto2f(x))))
mesta <- unique(c(mesta1, mesta2))
matrika <- matrix(0, nrow=length(mesta), ncol=length(mesta))
rownames(matrika) <- mesta
colnames(matrika) <- mesta
for (i in 1:length(l)){
mesto1 <- mesto1f(l[i])
mesto2 <- mesto2f(l[i])
dist <- distf(l[i])
matrika[mesto1, mesto2] <- as.numeric(dist)
}
matrika <- matrika + t(matrika)
min <- 0
perms <- permutations(length(mesta), length(mesta))
for (j in 1:factorial(length(mesta))){
perm <- perms[j,]
dist <- 0
for (i in 1:(length(perm)-1)){
dist <- dist + matrika[perm[i], perm[i+1]]
}
if (dist>min){
min <- dist
}
}
mesto1f <- function(string){
a <- regexpr("\\w*\\S", string)
mesto1 <- regmatches(string, a)
return(mesto1)
}
mesto2f <- function(string){
a <- regexpr("(?<=to\\s)(\\w+)", string, perl=T)
mesto2 <- regmatches(string, a)
return(mesto2)
}
distf <- function(string){
a <- regexpr("[0-9]+", string)
dist <- regmatches(string, a)
return(dist)
}
mesta1
