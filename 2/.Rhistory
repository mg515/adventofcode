pos <- sample(1:2,1)
pos <- poteze[[pos]]
pos
source('~/konjicek.R')
source('~/konjicek.R')
source('~/konjicek.R')
source('~/konjicek.R')
source('~/konjicek.R')
source('~/konjicek.R')
source('~/konjicek.R')
source('~/konjicek.R')
source('~/konjicek.R')
source('~/konjicek.R')
source('~/konjicek.R')
source('~/konjicek.R')
source('~/konjicek.R')
source('~/konjicek.R')
source('~/konjicek.R')
source('~/konjicek.R')
source('~/konjicek.R')
source('~/konjicek.R')
source('~/konjicek.R')
source('~/konjicek.R')
source('~/konjicek.R')
koliko <- c()
for (i in 1:10000){
pos <- sample(1:2,1)
pos <- poteze[[pos]]
pos
i <- 1
while (sum(pos == c(0,0)) != 2){
pos <- naredi.potezo(pos)
i <- i + 1
}
print(i)
koliko <- c(koliko, i)
}
source('~/konjicek.R')
mean(koliko)
plot(density(koliko))
source('~/konjicek.R')
source('~/Documents/IPFM1/drugisklop.R')
rlnorm(5)
?rlnorm
2^10
5 ^10
4^10
1:4^10
a <- 1:4
a^10
10^5
quantiles <- c()
for (j in 3:6){
cells <- c()
for (i in 1:(10**j)){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums = sum(severity)
cells <- c(cells, sums)
}
quantiles <- c(quantiles, quantile(cells, 0.999))
}
quantiles <- c()
for (j in 2:5){
cells <- c()
for (i in 1:(10**j)){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums = sum(severity)
cells <- c(cells, sums)
}
quantiles <- c(quantiles, quantile(cells, 0.999))
}
quantiles
plot(quantiles)
quantiles <- c()
for (j in 1:10){
cells <- c()
for (i in 1:(10)^4){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums = sum(severity)
cells <- c(cells, sums)
}
quantiles <- c(quantiles, quantile(cells, 0.999))
}
quantiles
plot(quantiles)
sd(quantiles)
var(quantiles)
sd(quantiles)
sd(quantiles)/mean(quantiles)
quantiles <- c()
for (j in 1:20){
cells <- c()
for (i in 1:(10)){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums = sum(severity)
cells <- c(cells, sums)
}
quantiles <- c(quantiles, quantile(cells, 0.999))
}
quantiles <- c()
for (j in 1:20){
cells <- c()
for (i in 1:(10**4)){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums = sum(severity)
cells <- c(cells, sums)
}
quantiles <- c(quantiles, quantile(cells, 0.999))
}
sd(quantiles)/mean(quantiles)
sd(quantiles)
quantiles
quantiles <- c()
for (j in 1:30){
cells <- c()
for (i in 1:(10**4)){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums = sum(severity)
cells <- c(cells, sums)
}
quantiles <- c(quantiles, quantile(cells, 0.999))
}
sd(quantiles)
sd(quantiles)/mean(quantiles)
MC <- c(100, 1000, 5000, 10000, 25000, 50000, 100000)
quantiles <- c()
for (j in 1:length(MC)){
cells <- c()
for (i in MC){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums = sum(severity)
cells <- c(cells, sums)
}
quantiles <- c(quantiles, quantile(cells, 0.999))
}
quantiles
MC <- 10000
sums <- c()
for (i in 1:MC){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums = c(sums, sum(severity))
}
quantile(sums, 0.999)
test.MC.error <- function(MCn){
quantiles <- c()
for (j in 1:50){
sums <- c()
for (i in MCn){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums <- c(sums, sum(severity))
}
quantiles <- c(quantiles, quantile(cells, 0.999))
return (sd(quantiles))
}
test.MC.error <- function(MCn){
quantiles <- c()
for (j in 1:50){
sums <- c()
for (i in MCn){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums <- c(sums, sum(severity))
}
quantiles <- c(quantiles, quantile(cells, 0.999))
return (sd(quantiles))
}
}
test.MC.error <- function(MCn){
quantiles <- c()
for (j in 1:50){
sums <- c()
for (i in MCn){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums <- c(sums, sum(severity))
}
quantiles <- c(quantiles, quantile(cells, 0.999))
}
return (sd(quantiles))
}
test.MC.error(10)
test.MC.error <- function(MCn){
quantiles <- c()
for (j in 1:50){
sums <- c()
for (i in MCn){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums <- c(sums, sum(severity))
}
quantiles <- c(quantiles, quantile(sums, 0.999))
}
return (sd(quantiles))
}
test.MC.error(10)
test.MC.error(50)
test.MC.error(100)
test.MC.error(1000)
test.MC.error(10000)
test.MC.error <- function(MCn){
quantiles <- c()
for (j in 1:50){
sums <- c()
for (i in MCn){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums <- c(sums, sum(severity))
}
quantiles <- c(quantiles, quantile(sums, 0.999))
}
print(mean(quantiles))
return (sd(quantiles))
}
test.MC.error(10000)
test.MC.error <- function(MCn){
quantiles <- c()
for (j in 1:10){
sums <- c()
for (i in MCn){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums <- c(sums, sum(severity))
}
quantiles <- c(quantiles, quantile(sums, 0.999))
}
print(mean(quantiles))
return (sd(quantiles))
}
test.MC.error(10000)
test.MC.error(100000)
test.MC.error <- function(MCn){
quantiles <- c()
for (j in 1:10){
sums <- c()
for (i in MCn){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums <- c(sums, sum(severity))
}
quantiles <- c(quantiles, quantile(sums, 0.999))
}
print(mean(quantiles))
return (quantiles)
}
test.MC.error(100000)
test.MC.error(10000)
MC <- c(100, 1000, 5000, 10000, 25000, 50000, 100000)
MC <- 10000
quantiles <- c()
for (j in 1:10){
cells <- c()
for (i in MC){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums = sum(severity)
cells <- c(cells, sums)
}
quantiles <- c(quantiles, quantile(cells, 0.999))
}
quantiles
mean(quantiles)
MC <- c(100, 1000, 5000, 10000, 25000, 50000, 100000)
MC <- 100000
quantiles <- c()
for (j in 1:10){
cells <- c()
for (i in MC){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums = sum(severity)
cells <- c(cells, sums)
}
quantiles <- c(quantiles, quantile(cells, 0.999))
}
mean(quantiles)
test.MC.error <- function(MCn){
quantiles <- c()
for (j in 1:10){
sums <- c()
for (i in MCn){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums <- c(sums, sum(severity))
}
quantiles <- c(quantiles, quantile(sums, 0.999))
}
print(mean(quantiles))
return (quantiles)
}
test.MC.error(10000)
sd(test.MC.error(10000))
sd(test.MC.error(100000))
test.MC.error <- function(MCn){
quantiles <- c()
for (j in 1:10){
sums <- c()
for (i in MCn){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums <- c(sums, sum(severity))
}
quantiles <- c(quantiles, quantile(sums, 0.999))
}
return (quantiles)
}
sd(test.MC.error(100000))
sd(test.MC.error(10000))
sd(test.MC.error(1000))
sd(test.MC.error(100))
apply(vec, function(x) test.MC.error(x))
lapply(vec, function(x) test.MC.error(x))
vec <- c(10,100,1000,10000,100000)
lapply(vec, function(x) test.MC.error(x))
lapply(vec, function(x) sd(test.MC.error(x)))
test <- lapply(vec, function(x) sd(test.MC.error(x)))
unist(test)
unlist(test)
sd(unlist(test))
plot(unlist(test))
test.MC.error <- function(MCn){
quantiles <- c()
for (j in 1:100){
sums <- c()
for (i in MCn){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums <- c(sums, sum(severity))
}
quantiles <- c(quantiles, quantile(sums, 0.999))
}
return (quantiles)
}
vec <- c(10,100,1000,10000,100000)
test <- lapply(vec, function(x) sd(test.MC.error(x)))
plot(unlist(test))
100**3
vec <- (rep(1:100))**3
test <- lapply(vec, function(x) sd(test.MC.error(x)))
plot(unlist(test))
plot(vec)
100**4
vec <- (rep(1:100))**4
test <- lapply(vec, function(x) sd(test.MC.error(x)))
plot(unlist(test))
vec <- (rep(1:100))**4
test <- lapply(vec, function(x) sd(test.MC.error(x)))
plot(unlist(test))
test.MC.error <- function(MCn){
quantiles <- c()
for (j in 1:100){
sums <- c()
for (i in MCn){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums <- c(sums, sum(severity))
}
quantiles <- c(quantiles, quantile(sums, 0.999))
}
return (quantiles)
}
vec <- (rep(1:100))**4
test <- lapply(vec, function(x) mean(test.MC.error(x)))
plot(unlist(test))
vec <- (rep(1:100))**3
test <- lapply(vec, function(x) mean(test.MC.error(x)))
plot(unlist(test))
vec <- (rep(1:100))**3
test <- lapply(vec, function(x) var(test.MC.error(x)))
plot(unlist(test))
vec <- (rep(1:100))**3
test <- lapply(vec, function(x) sd(test.MC.error(x)))
plot(unlist(test))
vec <- (rep(1:100))**4
plot(vec)
vec <- (rep(1:100))**3
plot(vec)
calc.quantiles <- function(MCn){
quantiles <- c()
for (j in 1:1000){
sums <- c()
for (i in MCn){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums <- c(sums, sum(severity))
}
quantiles <- c(quantiles, quantile(sums, 0.999))
}
return (quantiles)
}
vec <- (rep(1:100))**3
test <- lapply(vec, function(x) sd(calc.quantiles(x)))
plot(unlist(test))
calc.quantiles <- function(MCn){
quantiles <- c()
for (j in 1:1000){
sums <- c()
for (i in MCn){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums <- c(sums, sum(severity))
}
quantiles <- c(quantiles, quantile(sums, 0.999))
}
return (quantiles)
}
vec <- (rep(1:100))**3
test <- lapply(vec, function(x) sd(calc.quantiles(x)))
plot(unlist(test))
vec <- (rep(1:100))**3
test <- lapply(vec, function(x) sd(calc.quantiles(x)))
plot(unlist(test), xlab="standard deviation", ylab="MCn",
main="standard deviation of 99% VaR for different Monte Carlo numbers")
vec <- (rep(1:100))**3
test <- lapply(vec, function(x) sd(calc.quantiles(x)))
plot(unlist(test), xlab="standard deviation", ylab="MCn",
main="standard deviation of 99% VaR for different Monte Carlo numbers")
vec <- (rep(1:100))**3; names(vec) <- toString(vec)
vec
toString(vec)
vec <- (rep(1:100))**3
names(vec) <- lapply(vec, function(x) toString(vec))
vec
vec <- (rep(1:100))**3
lapply(vec, function(x) toString(vec))
vec <- (rep(1:100))**3
names(vec) <- lapply(vec, function(x) toString(x))
vec
vec <- (rep(1:100))**3
names(vec) <- lapply(vec, function(x) toString(x))
test <- lapply(vec, function(x) sd(calc.quantiles(x)))
plot(unlist(test), ylab="standard deviation", xlab="MCn",
main="standard deviation of 99% VaR for different Monte Carlo numbers")
vec <- (rep(1:100))**3
names(vec) <- lapply(vec, function(x) toString(x))
test <- lapply(vec, function(x) sd(calc.quantiles(x)))
plot(vec, unlist(test), ylab="standard deviation", xlab="MCn",
main="standard deviation of 99% VaR for different Monte Carlo numbers")
vec <- (rep(1:100))**3
names(vec) <- lapply(vec, function(x) toString(x))
test <- lapply(vec, function(x) sd(calc.quantiles(x)))
plot(vec, unlist(test), ylab="standard deviation", xlab="MCn",
main="standard deviation of 99% VaR for different Monte Carlo numbers")
vec <- (rep(1:100))**3
names(vec) <- lapply(vec, function(x) toString(x))
test <- lapply(vec, function(x) sd(calc.quantiles(x)))
plot(vec, unlist(test), ylab="standard deviation", xlab="MCn",
main="standard deviation of 99% VaR for different Monte Carlo numbers")
vec <- (rep(1:100))**3
names(vec) <- lapply(vec, function(x) toString(x))
test <- lapply(vec, function(x) sd(calc.quantiles(x)))
plot(vec, unlist(test), ylab="standard deviation", xlab="MCn",
main="standard deviation of 99% VaR for different Monte Carlo numbers")
plot(log(vec), unlist(test), ylab="standard deviation", xlab="MCn",
main="standard deviation of 99% VaR for different Monte Carlo numbers")
plot(vec, unlist(test), ylab="standard deviation", xlab="MCn",
main="standard deviation of 99% VaR for different Monte Carlo numbers")
vec <- (rep(1:100))**3
plot(vec, unlist(test), ylab="standard deviation", xlab="MCn",
main="standard deviation of 99% VaR for different Monte Carlo numbers")
calc.quantiles <- function(MCn){
quantiles <- c()
for (j in 1:1000){
sums <- c()
for (i in MCn){
n <- rpois(1, 3)
severity <- rlnorm(n, meanlog = 11, sdlog = 2)
sums <- c(sums, sum(severity))
}
quantiles <- c(quantiles, quantile(sums, 0.999))
}
return (quantiles)
}
calc.quantiles(10000)
MEANcalc.quantiles(10000)
mean(calc.quantiles(10000))
sdf(calc.quantiles(10000))
sd(calc.quantiles(10000))
plot(calc.quantiles(10000))
source('~/.active-rstudio-document')
setwd("/media/diskC/Documents and Settings/miha/Documents/adventofcode/2/")
source('/media/diskC/Documents and Settings/miha/Documents/adventofcode/2/2.r')
library(stringr)
?regex
dims <- regexpr("/d", data[i,])
dims
dims <- grepl("/d", data[i,])
dims
data[i,]
typeof(data[i,])
dims <- g("/d", toString(data[i,]))
dims <- grepl("/d", toString(data[i,]))
dims
toString(data[i,])
dims <- grep("/d", toString(data[i,]))
dims
dims <- grep("[0-9]", toString(data[i,]))
dims
dims <- grep("\d", toString(data[i,]))
dims <- grep("/d", toString(data[i,]))
dims
dims <- grep("\d+", toString(data[i,]))
data <- read.table("input.txt", sep="x")
data
